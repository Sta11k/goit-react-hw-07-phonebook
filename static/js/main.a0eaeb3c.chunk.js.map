{"version":3,"sources":["components/Forms/Form.module.css","components/Todolist/Todolist.module.css","components/Filter/Filter.module.css","redux/app/app-phonebook-actions.js","redux/app/app-phonebook-selector.js","components/Forms/Form.js","redux/app/operation.js","components/Todolist/Todolist.js","components/Filter/Filter.js","App.js","redux/app/app-phonebook-reducer.js","redux/store.js","index.js"],"names":["module","exports","addContacts","createAction","name","number","association","payload","id","shortid","generate","deleteContacts","changeFilter","getContacts","state","contacts","contact","getFilter","filter","Form","useSelector","dispatch","useDispatch","useState","setName","setNumber","setAssociation","onSubmit","e","preventDefault","repeatName","reduce","acc","repeatNumber","includes","alert","className","s","m","title","form__name","onChange","currentTarget","value","type","pattern","required","form__number","radio__btn","checked","contactsApi","createApi","reducerPath","tagTypes","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","fetchContact","query","providesTags","result","map","mutation","body","url","method","invalidatesTags","useFetchContactQuery","useAddContactsMutation","useDeleteContactsMutation","Todolist","contacts__list","phone","item","name__contact","btn","onClick","Filter","label","input","event","target","App","observable","Observable","subscriber","next","setTimeout","complete","console","log","subscribe","x","error","err","contactApi","data","isFetching","contactList","createReducer","_","phonebookReducer","combineReducers","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","setupListeners","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0eaeb3c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"radio__btn\":\"Form_radio__btn__2kniY\",\"title\":\"Form_title__YRdrH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts__list\":\"Todolist_contacts__list__313fp\",\"item\":\"Todolist_item__1CEw3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__nhQP0\",\"input\":\"Filter_input__2NmL9\"};","import { createAction } from '@reduxjs/toolkit';\r\n// import { defaults } from 'gh-pages';\r\n\r\n// import { useState } from 'react';\r\n// import { v4 as uuid } from 'uuid';\r\n// const contactId = uuid();\r\nimport shortid from 'shortid';\r\n// import {\r\n//   useFetchContactQuery,\r\n//   useAddContactsMutation,\r\n//   useDeleteContactsMutation,\r\n// } from '../../redux/app/operation';\r\n\r\nexport const addContacts = createAction(\r\n  'contacts/add',\r\n  (name, number, association) => ({\r\n    payload: {\r\n      id: shortid.generate(),\r\n      name,\r\n      number,\r\n      association,\r\n    },\r\n  }),\r\n);\r\n\r\nexport const deleteContacts = createAction('contacts/delete');\r\nexport const changeFilter = createAction('filter/value');\r\n","export const getContacts = state => state.contacts.contact;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const optimizedFilter = filter.toLowerCase();\r\n  return contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(optimizedFilter),\r\n  );\r\n};\r\n","// import { Component } from 'react';\r\n// import { connect } from 'react-redux';\r\nimport { useState } from 'react';\r\nimport s from './Form.module.css';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addContacts } from '../../redux/app/app-phonebook-actions';\r\nimport { getContacts } from '../../redux/app/app-phonebook-selector';\r\n\r\nfunction Form() {\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmit = (name, number, association) =>\r\n    dispatch(addContacts(name, number, association));\r\n\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const [association, setAssociation] = useState('Other');\r\n\r\n  // const contactCheck = () => {\r\n\r\n  //     const repeatName = contacts.reduce(\r\n  //     (acc, contact) => [...acc, contact.name],\r\n  //     [],\r\n  //   );\r\n  //   const repeatNumber = contacts.reduce(\r\n  //     (acc, contact) => [...acc, contact.number],\r\n  //     [],\r\n  //   );\r\n\r\n  //   if (repeatName.includes(name) || repeatNumber.includes(number)) {\r\n\r\n  //    alert(`${name} ${number} is already `);\r\n  //     return;\r\n  //   }\r\n\r\n  //   if (name === '' || number === '') {\r\n  //     alert(`Enter data`);\r\n  //     return;\r\n  //   }\r\n\r\n  // };\r\n\r\n  const handleSabmit = e => {\r\n    e.preventDefault();\r\n    const repeatName = contacts.reduce(\r\n      (acc, contact) => [...acc, contact.name],\r\n      [],\r\n    );\r\n    const repeatNumber = contacts.reduce(\r\n      (acc, contact) => [...acc, contact.number],\r\n      [],\r\n    );\r\n\r\n    if (repeatName.includes(name) || repeatNumber.includes(number)) {\r\n      alert(`${name} ${number} is already `);\r\n      return;\r\n    }\r\n\r\n    if (name === '' || number === '') {\r\n      alert(`Enter data`);\r\n      return;\r\n    }\r\n\r\n    onSubmit(name, number, association);\r\n    setName('');\r\n    setNumber('');\r\n    setAssociation('Other');\r\n    //Дизпачим продукет в редакс\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSabmit} className={s.m}>\r\n      <h2 className={s.title}>Phonebook</h2>\r\n      <label className={s.form__name}>\r\n        Name\r\n        <input\r\n          // id={this.contactIdName}\r\n          onChange={e => setName(e.currentTarget.value)}\r\n          type=\"text\"\r\n          value={name}\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </label>\r\n      <label className={s.form__number}>\r\n        Number\r\n        <input\r\n          // id={this.contactIdNumber}\r\n          onChange={e => setNumber(e.currentTarget.value)}\r\n          type=\"tel\"\r\n          value={number}\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <div className={s.radio__btn}>\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"association\"\r\n            value=\"Work\"\r\n            onChange={e => setAssociation(e.currentTarget.value)}\r\n            checked={association === 'Work'}\r\n          />\r\n          Work\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"association\"\r\n            value=\"Family\"\r\n            onChange={e => setAssociation(e.currentTarget.value)}\r\n            checked={association === 'Family'}\r\n          />\r\n          Family\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"association\"\r\n            value=\"Friends\"\r\n            onChange={e => setAssociation(e.currentTarget.value)}\r\n            checked={association === 'Friends'}\r\n          />\r\n          Friends\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"association\"\r\n            value=\"Other\"\r\n            onChange={e => setAssociation(e.currentTarget.value)}\r\n            checked={association === 'Other'}\r\n          />\r\n          Other\r\n        </label>\r\n      </div>\r\n      <button type=\"submit\">Add contacts</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n\r\n// class Form extends Component {\r\n//   state = {\r\n//     // contacts: [],\r\n//     id: '',\r\n//     name: '',\r\n//     number: '',\r\n//     association: 'Other',\r\n//   };\r\n\r\n//   contactIdName = uuid();\r\n//   contactIdNumber = uuid();\r\n\r\n//   handleChange = e => {\r\n//     console.log(e.currentTarget.value);\r\n//     // const contactId = uuid();\r\n//     const { name, value } = e.currentTarget;\r\n//     this.setState({ [name]: value });\r\n//     // this.setState({ id: contactId });\r\n//   };\r\n\r\n//   handleSabmit = e => {\r\n//     e.preventDefault();\r\n//     const contactId = uuid();\r\n//     const { name, number, association } = this.state;\r\n//     const contactItem = {\r\n//       id: contactId,\r\n//       name,\r\n//       number,\r\n//       association,\r\n//     };\r\n//     this.setState({ contactItem }); //для себя пишем новий обект продукта\r\n\r\n//     this.props.onAdd(contactItem); //Дизпачим продукет в редакс\r\n//     this.resetForm();\r\n//   };\r\n\r\n//   resetForm = () => {\r\n//     this.setState({ id: '', name: '', number: '', association: 'Other' });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <form onSubmit={this.handleSabmit} className={s.m}>\r\n//         <h2 className={s.title}>Phonebook</h2>\r\n//         <label htmlFor={this.contactIdName} className={s.form__name}>\r\n//           Name\r\n//           <input\r\n//             id={this.contactIdName}\r\n//             onChange={this.handleChange}\r\n//             type=\"text\"\r\n//             value={this.state.name}\r\n//             name=\"name\"\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//             required\r\n//           />\r\n//         </label>\r\n//         <label htmlFor={this.contactIdNumber} className={s.form__number}>\r\n//           Number\r\n//           <input\r\n//             id={this.contactIdNumber}\r\n//             onChange={this.handleChange}\r\n//             type=\"tel\"\r\n//             value={this.state.number}\r\n//             name=\"number\"\r\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//             required\r\n//           />\r\n//         </label>\r\n\r\n//         <div className={s.radio__btn}>\r\n//           <label>\r\n//             <input\r\n//               type=\"radio\"\r\n//               name=\"association\"\r\n//               value=\"Work\"\r\n//               onChange={this.handleChange}\r\n//               checked={this.state.association === 'Work'}\r\n//             />\r\n//             Work\r\n//           </label>\r\n//           <label>\r\n//             <input\r\n//               type=\"radio\"\r\n//               name=\"association\"\r\n//               value=\"Family\"\r\n//               onChange={this.handleChange}\r\n//               checked={this.state.association === 'Family'}\r\n//             />\r\n//             Family\r\n//           </label>\r\n//           <label>\r\n//             <input\r\n//               type=\"radio\"\r\n//               name=\"association\"\r\n//               value=\"Friends\"\r\n//               onChange={this.handleChange}\r\n//               checked={this.state.association === 'Friends'}\r\n//             />\r\n//             Friends\r\n//           </label>\r\n//           <label>\r\n//             <input\r\n//               type=\"radio\"\r\n//               name=\"association\"\r\n//               value=\"Other\"\r\n//               onChange={this.handleChange}\r\n//               checked={this.state.association === 'Other'}\r\n//             />\r\n//             Other\r\n//           </label>\r\n//         </div>\r\n//         <button type=\"submit\">Add contacts</button>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   // console.log(\"dispatch\", dispatch);\r\n//   return {\r\n//     onAdd: contactR => dispatch(addContacts(contactR)),\r\n//   };\r\n// };\r\n// export default connect(null, mapDispatchToProps)(Form);\r\n","// import axios from 'axios';\r\n// import { configureStore } from '@reduxjs/toolkit';\r\n// import { setupListeners } from '@reduxjs/toolkit/query';\r\n// import { phonebookReducer } from './app-phonebook-reducer';\r\n\r\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n// import {\r\n//   getContactsRequest,\r\n//   getContactsSuccess,\r\n//   getContactsError,\r\n//   addContactsRequest,\r\n//   addContactsSuccess,\r\n//   addContactsError,\r\n//   deleteContactsRequest,\r\n//   deleteontactsSuccess,\r\n//   deleteContactsError,\r\n// } from './operatin';\r\n\r\n// axios.get('https://61935e66d3ae6d0017da850e.mockapi.io/contacts');\r\n\r\n//youtu.be/xJ2cgRkR8D0?t=4941\r\n//redux-toolkit.js.org/rtk-query/api/createApi\r\n\r\nexport const contactsApi = createApi({\r\n  reducerPath: 'contactsApi',\r\n  tagTypes: ['Contacts'],\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: 'https://61935e66d3ae6d0017da850e.mockapi.io/',\r\n  }),\r\n  endpoints: builder => ({\r\n    fetchContact: builder.query({\r\n      query: () => `/contacts`,\r\n      providesTags: result =>\r\n        result\r\n          ? [\r\n              ...result.map(({ id }) => ({ type: 'Contacts', id })),\r\n              { type: 'Contacts', id: 'LIST' },\r\n            ]\r\n          : [{ type: 'Contacts', id: 'LIST' }],\r\n    }),\r\n    addContacts: builder.mutation({\r\n      query: body => ({\r\n        url: `/contacts`,\r\n        method: 'POST',\r\n        body,\r\n      }),\r\n      invalidatesTags: [{ type: 'Contacts', id: 'LIST' }],\r\n    }),\r\n    deleteContacts: builder.mutation({\r\n      query: id => ({\r\n        url: `contacts/${id}`,\r\n        method: 'DELETE',\r\n      }),\r\n      invalidatesTags: [{ type: 'Contacts', id: 'LIST' }],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useFetchContactQuery,\r\n  useAddContactsMutation,\r\n  useDeleteContactsMutation,\r\n} = contactsApi;\r\n\r\n// console.log(contactsApi);\r\n// const fetchContacts = () => async dispatch => {\r\n//   dispatch(fetchContactsRequest());\r\n//   try {\r\n//     const { data } = await axios.get('http://localhost:4040/contacts');\r\n//     dispatch(fetchContactsSuccess(data));\r\n//   } catch (error) {\r\n//     dispatch(fetchContactsError(error));\r\n//   }\r\n// };\r\n\r\n// const addContact = (name, number) => async dispatch => {\r\n//   const contact = {\r\n//     name,\r\n//     number,\r\n//   };\r\n\r\n//   dispatch(addContactRequest());\r\n\r\n//   try {\r\n//     const { data } = await axios.post(\r\n//       'http://localhost:4040/contacts',\r\n//       contact,\r\n//     );\r\n//     dispatch(addContactSuccess(data));\r\n//   } catch (error) {\r\n//     dispatch(addContactError(error));\r\n//   }\r\n// };\r\n\r\n// const deleteContact = id => async dispatch => {\r\n//   dispatch(deleteContactRequest());\r\n//   try {\r\n//     await axios.delete(`http://localhost:4040/contacts/${id}`);\r\n//     dispatch(deleteContactSuccess(id));\r\n//   } catch (error) {\r\n//     dispatch(deleteContactError(error));\r\n//   }\r\n// };\r\n\r\n// const contactsOperations = {\r\n//   fetchContacts,\r\n//   addContact,\r\n//   deleteContact,\r\n// };\r\n// export default contactsOperations;\r\n","// import PropTypes from 'prop-types';\r\n// import { connect } from 'react-redux';\r\nimport s from './Todolist.module.css';\r\nimport { deleteContacts } from '../../redux/app/app-phonebook-actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getVisibleContacts } from '../../redux/app/app-phonebook-selector';\r\nimport {\r\n  useFetchContactQuery,\r\n  useAddContactsMutation,\r\n  useDeleteContactsMutation,\r\n} from '../../redux/app/operation';\r\n\r\nfunction Todolist({ contact }) {\r\n  // const { data, isfetching } = useFetchContactQuery();\r\n  // const [deleteContacts, { isLoading: isDeleting }] =\r\n  //   useDeleteContactsMutation();\r\n\r\n  // const contactsOll = useSelector(getVisibleContacts);\r\n  // const dispatch = useDispatch();\r\n  // const onDeleteContact = id => dispatch(deleteContacts(id));\r\n\r\n  return (\r\n    <ul className={s.contacts__list}>\r\n      {contact.map(({ id, name, phone, association }) => {\r\n        return (\r\n          <li key={id} className={s.item}>\r\n            {' '}\r\n            <p className={s.name__contact}>\r\n              Association: {association} | <span> name: {name} | </span>\r\n              <span>number: {phone} |</span>\r\n            </p>\r\n            <button\r\n              className={s.btn}\r\n              type=\"button\"\r\n              onClick={() => deleteContacts(id)}\r\n            >\r\n              {' '}\r\n              DELETE contact\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\nexport default Todolist;\r\n\r\n// Todolist.propTypes = {\r\n//   contacts: PropTypes.arrayOf(\r\n//     PropTypes.shape({\r\n//       id: PropTypes.string.isRequired,\r\n//       name: PropTypes.string.isRequired,\r\n//       number: PropTypes.string.isRequired,\r\n//     }),\r\n//   ),\r\n//   onDeleteContact: PropTypes.func.isRequired,\r\n// };\r\n\r\n// const mapStateToProps = state => {\r\n//   const { filter } = state;\r\n//   const optimizedFilter = filter.toLowerCase();\r\n//   const vizibleCOntacts = state.contact.filter(contact =>\r\n//     contact.name.toLowerCase().includes(optimizedFilter),\r\n//   );\r\n\r\n//   return { contactsOll: vizibleCOntacts };\r\n// };\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     onDeleteContact: id => dispatch(deleteContacts(id)),\r\n//   };\r\n// };\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Todolist);\r\n","// import { connect } from 'react-redux';\r\nimport s from './Filter.module.css';\r\n// import PropTypes from 'prop-types';\r\nimport { changeFilter } from '../../redux/app/app-phonebook-actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getFilter } from '../../redux/app/app-phonebook-selector';\r\nfunction Filter() {\r\n  const dispatch = useDispatch();\r\n  const value = useSelector(getFilter);\r\n  const onChange = event => dispatch(changeFilter(event.target.value));\r\n  return (\r\n    <label className={s.label}>\r\n      Find contacts by name\r\n      <input\r\n        className={s.input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n\r\n// Filter.propTypes = {\r\n//   value: PropTypes.string,\r\n//   onChange: PropTypes.func.isRequired,\r\n// };\r\n// const mapStateToProps = state => ({\r\n//   value: state.filter,\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: event => dispatch(changeFilter(event.currentTarget.value)),\r\n// });\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import './App.css';\nimport Form from './components/Forms/Form';\nimport TodoList from './components/Todolist/Todolist';\nimport Filter from './components/Filter/Filter';\nimport {\n  useFetchContactQuery,\n  useAddContactsMutation,\n  useDeleteContactsMutation,\n} from '../src/redux/app/operation';\n// import { Component } from 'react';\n// import { useSelector } from 'react-redux';\n// import { getVisibleContacts } from './redux/app/app-phonebook-selector';\n// import { connect } from 'react-redux';\n// import TestList from './components/Todolist/TestList';\n// import Timer from './components/Timer/Timer';\nimport { Observable } from 'rxjs';\nexport default function App() {\n  const observable = new Observable(subscriber => {\n    let caunt = 0;\n    subscriber.next(1);\n    subscriber.next(2);\n    subscriber.next(3);\n    setTimeout(() => {\n      subscriber.next(4);\n      subscriber.complete();\n    }, 1000);\n  });\n\n  console.log('just before subscribe');\n  observable.subscribe({\n    next(x) {\n      console.log('got value ' + x);\n    },\n    error(err) {\n      console.error('something wrong occurred: ' + err);\n    },\n    complete() {\n      console.log('done');\n    },\n  });\n  console.log('just after subscribe');\n\n  const { data: contactApi, isFetching } = useFetchContactQuery();\n  return (\n    <div className=\"App\">\n      <Form />\n      <Filter />\n      {/* {isFetching} */}\n      {contactApi && <TodoList contact={contactApi} />}\n      {/* <TestList /> */}\n      {/* <Timer /> */}\n    </div>\n  );\n}\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n// import { addContacts, deleteContacts } from './app-phonebook-actions';\r\nconst initState = [\r\n  // {\r\n  //   id: 'id-1',\r\n  //   name: 'Rosie Simpson',\r\n  //   number: '459-12-56',\r\n  //   association: 'Other',\r\n  // },\r\n  // {\r\n  //   id: 'id-2',\r\n  //   name: 'Hermione Kline',\r\n  //   number: '443-89-12',\r\n  //   association: 'Other',\r\n  // },\r\n  // {\r\n  //   id: 'id-3',\r\n  //   name: 'Eden Clements',\r\n  //   number: '645-17-79',\r\n  //   association: 'Other',\r\n  // },\r\n  // {\r\n  //   id: 'id-4',\r\n  //   name: 'Annie Copeland',\r\n  //   number: '227-91-26',\r\n  //   association: 'Other',\r\n  // },\r\n];\r\n\r\nconst contactList = createReducer(initState, {\r\n  'contacts/add': (state, { payload }) => [...state, payload],\r\n  'contacts/delete': (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  'filter/value': (_, { payload }) => payload,\r\n});\r\n\r\nexport const phonebookReducer = combineReducers({\r\n  contact: contactList,\r\n  filter,\r\n});\r\n\r\n// const contactList = (state = initState, { type, payload }) => {\r\n//   // console.log('action.payload', action.payload);\r\n//   // console.log('state', state);\r\n//   switch (type) {\r\n//     case 'contacts/add':\r\n//       return [...state, payload];\r\n//     case 'contacts/delete':\r\n//       return state.filter(contact => contact.id !== payload.id);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case 'filter/value':\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","// import { createStore, applyMiddleware } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// export const store = createStore(\r\n//   phonebookReducer,\r\n//   composeWithDevTools(applyMiddleware()),\r\n// );\r\nimport { setupListeners } from '@reduxjs/toolkit/dist/query';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  // persistStore,\r\n  // persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\nimport { phonebookReducer } from './app/app-phonebook-reducer';\r\nimport { contactsApi } from './app/operation';\r\n// const phonebookPersistConfig = {\r\n//   key: 'contact',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n// const persisteReducer = persistReducer(\r\n//   phonebookPersistConfig,\r\n//   phonebookReducer,\r\n// );\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: phonebookReducer,\r\n    [contactsApi.reducerPath]: contactsApi.reducer,\r\n  },\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware(\r\n      {\r\n        serializableCheck: {\r\n          ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n      },\r\n      //   ПЕРЕВІРИТИ ЧИ ВПЛИВАЄ НА ПЕРВІРКУ\r\n    )\r\n      .concat(logger)\r\n      .concat(contactsApi.middleware),\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nsetupListeners(store.dispatch);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { store, persistor } from './redux/store';\r\n// import { store} from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* <PersistGate loading={null} persistor={persistor}> */}\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n    {/* </PersistGate> */}\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <Provider store={store}>\r\n//       <App />\r\n//     </Provider>\r\n//   </React.StrictMode>,\r\n//   document.getElementById('root'),\r\n// );\r\n"],"sourceRoot":""}