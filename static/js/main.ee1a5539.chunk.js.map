{"version":3,"sources":["components/Forms/Form.module.css","components/Todolist/Todolist.module.css","components/Filter/Filter.module.css","redux/app/operation.js","redux/app/app-phonebook-selector.js","components/Forms/Form.js","redux/app/app-phonebook-actions.js","components/Todolist/Todolist.js","components/Filter/Filter.js","App.js","redux/app/app-phonebook-reducer.js","redux/store.js","index.js"],"names":["module","exports","contactsApi","createApi","reducerPath","tagTypes","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","fetchContact","query","providesTags","result","map","type","id","addContacts","mutation","newContact","url","method","body","invalidatesTags","deleteContacts","useFetchContactQuery","useAddContactsMutation","useDeleteContactsMutation","getContacts","state","contacts","contact","getFilter","filter","Form","useSelector","useState","name","setName","number","setNumber","association","setAssociation","onSubmit","e","preventDefault","repeatName","reduce","acc","repeatNumber","includes","alert","phone","className","s","m","title","form__name","onChange","currentTarget","value","pattern","required","form__number","radio__btn","checked","changeFilter","createAction","payload","shortid","generate","Todolist","isLoading","contacts__list","item","name__contact","btn","onClick","Filter","dispatch","useDispatch","label","input","event","target","App","contactApi","data","isFetching","contactList","createReducer","_","phonebookReducer","combineReducers","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","setupListeners","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee1a5539.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"radio__btn\":\"Form_radio__btn__2kniY\",\"title\":\"Form_title__YRdrH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts__list\":\"Todolist_contacts__list__313fp\",\"item\":\"Todolist_item__1CEw3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__nhQP0\",\"input\":\"Filter_input__2NmL9\"};","// import axios from 'axios';\n// import { configureStore } from '@reduxjs/toolkit';\n// import { setupListeners } from '@reduxjs/toolkit/query';\n// import { phonebookReducer } from './app-phonebook-reducer';\n\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n// import {\n//   getContactsRequest,\n//   getContactsSuccess,\n//   getContactsError,\n//   addContactsRequest,\n//   addContactsSuccess,\n//   addContactsError,\n//   deleteContactsRequest,\n//   deleteontactsSuccess,\n//   deleteContactsError,\n// } from './operatin';\n\n// axios.get('https://61935e66d3ae6d0017da850e.mockapi.io/contacts');\n\n//youtu.be/xJ2cgRkR8D0?t=4941\n//redux-toolkit.js.org/rtk-query/api/createApi\n\nexport const contactsApi = createApi({\n  reducerPath: 'contactsApi',\n  tagTypes: ['Contacts'],\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://61935e66d3ae6d0017da850e.mockapi.io/',\n  }),\n  endpoints: builder => ({\n    fetchContact: builder.query({\n      query: () => `/contacts`,\n      providesTags: result =>\n        result\n          ? [\n              ...result.map(({ id }) => ({ type: 'Contacts', id })),\n              { type: 'Contacts', id: 'LIST' },\n            ]\n          : [{ type: 'Contacts', id: 'LIST' }],\n    }),\n    addContacts: builder.mutation({\n      query: newContact => ({\n        url: `/contacts`,\n        method: 'POST',\n        body: { ...newContact },\n      }),\n      invalidatesTags: [{ type: 'Contacts', id: 'LIST' }],\n    }),\n    deleteContacts: builder.mutation({\n      query: id => ({\n        url: `contacts/${id}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: [{ type: 'Contacts', id: 'LIST' }],\n    }),\n  }),\n});\n\nexport const {\n  useFetchContactQuery,\n  useAddContactsMutation,\n  useDeleteContactsMutation,\n} = contactsApi;\n\n// console.log(contactsApi);\n// const fetchContacts = () => async dispatch => {\n//   dispatch(fetchContactsRequest());\n//   try {\n//     const { data } = await axios.get('http://localhost:4040/contacts');\n//     dispatch(fetchContactsSuccess(data));\n//   } catch (error) {\n//     dispatch(fetchContactsError(error));\n//   }\n// };\n\n// const addContact = (name, number) => async dispatch => {\n//   const contact = {\n//     name,\n//     number,\n//   };\n\n//   dispatch(addContactRequest());\n\n//   try {\n//     const { data } = await axios.post(\n//       'http://localhost:4040/contacts',\n//       contact,\n//     );\n//     dispatch(addContactSuccess(data));\n//   } catch (error) {\n//     dispatch(addContactError(error));\n//   }\n// };\n\n// const deleteContact = id => async dispatch => {\n//   dispatch(deleteContactRequest());\n//   try {\n//     await axios.delete(`http://localhost:4040/contacts/${id}`);\n//     dispatch(deleteContactSuccess(id));\n//   } catch (error) {\n//     dispatch(deleteContactError(error));\n//   }\n// };\n\n// const contactsOperations = {\n//   fetchContacts,\n//   addContact,\n//   deleteContact,\n// };\n// export default contactsOperations;\n","export const getContacts = state => state.contacts.contact;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const optimizedFilter = filter.toLowerCase();\r\n  return contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(optimizedFilter),\r\n  );\r\n};\r\n","// import { Component } from 'react';\n// import { connect } from 'react-redux';\nimport { useState } from 'react';\nimport s from './Form.module.css';\nimport { useAddContactsMutation } from '../../redux/app/operation';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from '../../redux/app/app-phonebook-selector';\n\nfunction Form({ contact }) {\n  const [addContacts] = useAddContactsMutation();\n  const contacts = useSelector(getContacts);\n  // const dispatch = useDispatch();\n  // console.log(addContacts);\n  // const onSubmit = (name, number, association) =>\n  //   dispatch(addContacts(name, number, association));\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [association, setAssociation] = useState('Other');\n\n  const handleSabmit = e => {\n    e.preventDefault();\n    const repeatName = contacts.reduce(\n      (acc, contact) => [...acc, contact.name],\n      [],\n    );\n    const repeatNumber = contacts.reduce(\n      (acc, contact) => [...acc, contact.number],\n      [],\n    );\n\n    if (repeatName.includes(name) || repeatNumber.includes(number)) {\n      alert(`${name} ${number} is already `);\n      return;\n    }\n\n    if (name === '' || number === '') {\n      alert(`Enter data`);\n      return;\n    }\n    let phone = number;\n    const newContact = { name, phone, association };\n    addContacts(newContact);\n    // onSubmit(name, number, association);\n    setName('');\n    setNumber('');\n    setAssociation('Other');\n    //Дизпачим продукет в редакс\n  };\n\n  return (\n    <form onSubmit={handleSabmit} className={s.m}>\n      <h2 className={s.title}>Phonebook</h2>\n      <label className={s.form__name}>\n        Name\n        <input\n          // id={this.contactIdName}\n          onChange={e => setName(e.currentTarget.value)}\n          type=\"text\"\n          value={name}\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className={s.form__number}>\n        Number\n        <input\n          // id={this.contactIdNumber}\n          onChange={e => setNumber(e.currentTarget.value)}\n          type=\"tel\"\n          value={number}\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n\n      <div className={s.radio__btn}>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"association\"\n            value=\"Work\"\n            onChange={e => setAssociation(e.currentTarget.value)}\n            checked={association === 'Work'}\n          />\n          Work\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"association\"\n            value=\"Family\"\n            onChange={e => setAssociation(e.currentTarget.value)}\n            checked={association === 'Family'}\n          />\n          Family\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"association\"\n            value=\"Friends\"\n            onChange={e => setAssociation(e.currentTarget.value)}\n            checked={association === 'Friends'}\n          />\n          Friends\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"association\"\n            value=\"Other\"\n            onChange={e => setAssociation(e.currentTarget.value)}\n            checked={association === 'Other'}\n          />\n          Other\n        </label>\n      </div>\n      <button type=\"submit\">Add contacts</button>\n    </form>\n  );\n}\n\nexport default Form;\n\n// class Form extends Component {\n//   state = {\n//     // contacts: [],\n//     id: '',\n//     name: '',\n//     number: '',\n//     association: 'Other',\n//   };\n\n//   contactIdName = uuid();\n//   contactIdNumber = uuid();\n\n//   handleChange = e => {\n//     console.log(e.currentTarget.value);\n//     // const contactId = uuid();\n//     const { name, value } = e.currentTarget;\n//     this.setState({ [name]: value });\n//     // this.setState({ id: contactId });\n//   };\n\n//   handleSabmit = e => {\n//     e.preventDefault();\n//     const contactId = uuid();\n//     const { name, number, association } = this.state;\n//     const contactItem = {\n//       id: contactId,\n//       name,\n//       number,\n//       association,\n//     };\n//     this.setState({ contactItem }); //для себя пишем новий обект продукта\n\n//     this.props.onAdd(contactItem); //Дизпачим продукет в редакс\n//     this.resetForm();\n//   };\n\n//   resetForm = () => {\n//     this.setState({ id: '', name: '', number: '', association: 'Other' });\n//   };\n\n//   render() {\n//     return (\n//       <form onSubmit={this.handleSabmit} className={s.m}>\n//         <h2 className={s.title}>Phonebook</h2>\n//         <label htmlFor={this.contactIdName} className={s.form__name}>\n//           Name\n//           <input\n//             id={this.contactIdName}\n//             onChange={this.handleChange}\n//             type=\"text\"\n//             value={this.state.name}\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//           />\n//         </label>\n//         <label htmlFor={this.contactIdNumber} className={s.form__number}>\n//           Number\n//           <input\n//             id={this.contactIdNumber}\n//             onChange={this.handleChange}\n//             type=\"tel\"\n//             value={this.state.number}\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//           />\n//         </label>\n\n//         <div className={s.radio__btn}>\n//           <label>\n//             <input\n//               type=\"radio\"\n//               name=\"association\"\n//               value=\"Work\"\n//               onChange={this.handleChange}\n//               checked={this.state.association === 'Work'}\n//             />\n//             Work\n//           </label>\n//           <label>\n//             <input\n//               type=\"radio\"\n//               name=\"association\"\n//               value=\"Family\"\n//               onChange={this.handleChange}\n//               checked={this.state.association === 'Family'}\n//             />\n//             Family\n//           </label>\n//           <label>\n//             <input\n//               type=\"radio\"\n//               name=\"association\"\n//               value=\"Friends\"\n//               onChange={this.handleChange}\n//               checked={this.state.association === 'Friends'}\n//             />\n//             Friends\n//           </label>\n//           <label>\n//             <input\n//               type=\"radio\"\n//               name=\"association\"\n//               value=\"Other\"\n//               onChange={this.handleChange}\n//               checked={this.state.association === 'Other'}\n//             />\n//             Other\n//           </label>\n//         </div>\n//         <button type=\"submit\">Add contacts</button>\n//       </form>\n//     );\n//   }\n// }\n\n// const mapDispatchToProps = dispatch => {\n//   // console.log(\"dispatch\", dispatch);\n//   return {\n//     onAdd: contactR => dispatch(addContacts(contactR)),\n//   };\n// };\n// export default connect(null, mapDispatchToProps)(Form);\n","import { createAction } from '@reduxjs/toolkit';\r\n// import { defaults } from 'gh-pages';\r\n\r\n// import { useState } from 'react';\r\n// import { v4 as uuid } from 'uuid';\r\n// const contactId = uuid();\r\nimport shortid from 'shortid';\r\n// import {\r\n//   useFetchContactQuery,\r\n//   useAddContactsMutation,\r\n//   useDeleteContactsMutation,\r\n// } from '../../redux/app/operation';\r\n\r\nexport const addContacts = createAction(\r\n  'contacts/add',\r\n  (name, number, association) => ({\r\n    payload: {\r\n      id: shortid.generate(),\r\n      name,\r\n      number,\r\n      association,\r\n    },\r\n  }),\r\n);\r\n\r\nexport const deleteContacts = createAction('contacts/delete');\r\nexport const changeFilter = createAction('filter/value');\r\n","// import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\nimport s from './Todolist.module.css';\nimport { deleteContacts } from '../../redux/app/app-phonebook-actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getVisibleContacts } from '../../redux/app/app-phonebook-selector';\nimport {\n  useFetchContactQuery,\n  useAddContactsMutation,\n  useDeleteContactsMutation,\n} from '../../redux/app/operation';\n\nfunction Todolist({ contact }) {\n  // const { data, isfetching } = useFetchContactQuery();\n  const [deleteContacts, { isLoading: isDeleting }] =\n    useDeleteContactsMutation();\n\n  // const contactsOll = useSelector(getVisibleContacts);\n  // const dispatch = useDispatch();\n  // const onDeleteContact = id => dispatch(deleteContacts(id));\n\n  return (\n    <ul className={s.contacts__list}>\n      {contact.map(({ id, name, phone, association }) => {\n        return (\n          <li key={id} className={s.item}>\n            {' '}\n            <p className={s.name__contact}>\n              Association: {association} | <span> name: {name} | </span>\n              <span>number: {phone} |</span>\n            </p>\n            <button\n              className={s.btn}\n              type=\"button\"\n              onClick={() => deleteContacts(id)}\n            >\n              {' '}\n              DELETE contact\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\nexport default Todolist;\n\n// Todolist.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     }),\n//   ),\n//   onDeleteContact: PropTypes.func.isRequired,\n// };\n\n// const mapStateToProps = state => {\n//   const { filter } = state;\n//   const optimizedFilter = filter.toLowerCase();\n//   const vizibleCOntacts = state.contact.filter(contact =>\n//     contact.name.toLowerCase().includes(optimizedFilter),\n//   );\n\n//   return { contactsOll: vizibleCOntacts };\n// };\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     onDeleteContact: id => dispatch(deleteContacts(id)),\n//   };\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(Todolist);\n","// import { connect } from 'react-redux';\r\nimport s from './Filter.module.css';\r\n// import PropTypes from 'prop-types';\r\nimport { changeFilter } from '../../redux/app/app-phonebook-actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getFilter } from '../../redux/app/app-phonebook-selector';\r\nfunction Filter() {\r\n  const dispatch = useDispatch();\r\n  const value = useSelector(getFilter);\r\n  const onChange = event => dispatch(changeFilter(event.target.value));\r\n  return (\r\n    <label className={s.label}>\r\n      Find contacts by name\r\n      <input\r\n        className={s.input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n\r\n// Filter.propTypes = {\r\n//   value: PropTypes.string,\r\n//   onChange: PropTypes.func.isRequired,\r\n// };\r\n// const mapStateToProps = state => ({\r\n//   value: state.filter,\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: event => dispatch(changeFilter(event.currentTarget.value)),\r\n// });\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import './App.css';\nimport Form from './components/Forms/Form';\nimport TodoList from './components/Todolist/Todolist';\nimport Filter from './components/Filter/Filter';\nimport {\n  useFetchContactQuery,\n  useAddContactsMutation,\n  useDeleteContactsMutation,\n} from '../src/redux/app/operation';\n// import { Component } from 'react';\n// import { useSelector } from 'react-redux';\n// import { getVisibleContacts } from './redux/app/app-phonebook-selector';\n// import { connect } from 'react-redux';\n// import TestList from './components/Todolist/TestList';\n// import Timer from './components/Timer/Timer';\nimport { Observable } from 'rxjs';\nexport default function App() {\n  // const observable = new Observable(subscriber => {\n  //   let caunt = 0;\n  //   subscriber.next(1);\n  //   subscriber.next(2);\n  //   subscriber.next(3);\n  //   setTimeout(() => {\n  //     subscriber.next(4);\n  //     subscriber.complete();\n  //   }, 1000);\n  // });\n\n  // console.log('just before subscribe');\n  // observable.subscribe({\n  //   next(x) {\n  //     console.log('got value ' + x);\n  //   },\n  //   error(err) {\n  //     console.error('something wrong occurred: ' + err);\n  //   },\n  //   complete() {\n  //     console.log('done');\n  //   },\n  // });\n  // console.log('just after subscribe');\n\n  const { data: contactApi, isFetching } = useFetchContactQuery();\n  return (\n    <div className=\"App\">\n      <Form />\n      <Filter contact={contactApi} />\n      {/* {isFetching} */}\n      {contactApi && <TodoList contact={contactApi} />}\n      {/* <TestList /> */}\n      {/* <Timer /> */}\n    </div>\n  );\n}\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n// import { addContacts, deleteContacts } from './app-phonebook-actions';\r\nconst initState = [\r\n  // {\r\n  //   id: 'id-1',\r\n  //   name: 'Rosie Simpson',\r\n  //   number: '459-12-56',\r\n  //   association: 'Other',\r\n  // },\r\n  // {\r\n  //   id: 'id-2',\r\n  //   name: 'Hermione Kline',\r\n  //   number: '443-89-12',\r\n  //   association: 'Other',\r\n  // },\r\n  // {\r\n  //   id: 'id-3',\r\n  //   name: 'Eden Clements',\r\n  //   number: '645-17-79',\r\n  //   association: 'Other',\r\n  // },\r\n  // {\r\n  //   id: 'id-4',\r\n  //   name: 'Annie Copeland',\r\n  //   number: '227-91-26',\r\n  //   association: 'Other',\r\n  // },\r\n];\r\n\r\nconst contactList = createReducer(initState, {\r\n  'contacts/add': (state, { payload }) => [...state, payload],\r\n  'contacts/delete': (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  'filter/value': (_, { payload }) => payload,\r\n});\r\n\r\nexport const phonebookReducer = combineReducers({\r\n  contact: contactList,\r\n  filter,\r\n});\r\n\r\n// const contactList = (state = initState, { type, payload }) => {\r\n//   // console.log('action.payload', action.payload);\r\n//   // console.log('state', state);\r\n//   switch (type) {\r\n//     case 'contacts/add':\r\n//       return [...state, payload];\r\n//     case 'contacts/delete':\r\n//       return state.filter(contact => contact.id !== payload.id);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case 'filter/value':\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","// import { createStore, applyMiddleware } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// export const store = createStore(\r\n//   phonebookReducer,\r\n//   composeWithDevTools(applyMiddleware()),\r\n// );\r\nimport { setupListeners } from '@reduxjs/toolkit/dist/query';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  // persistStore,\r\n  // persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\nimport { phonebookReducer } from './app/app-phonebook-reducer';\r\nimport { contactsApi } from './app/operation';\r\n// const phonebookPersistConfig = {\r\n//   key: 'contact',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n// const persisteReducer = persistReducer(\r\n//   phonebookPersistConfig,\r\n//   phonebookReducer,\r\n// );\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: phonebookReducer,\r\n    [contactsApi.reducerPath]: contactsApi.reducer,\r\n  },\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware(\r\n      {\r\n        serializableCheck: {\r\n          ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n      },\r\n      //   ПЕРЕВІРИТИ ЧИ ВПЛИВАЄ НА ПЕРВІРКУ\r\n    )\r\n      .concat(logger)\r\n      .concat(contactsApi.middleware),\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nsetupListeners(store.dispatch);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { store, persistor } from './redux/store';\r\n// import { store} from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* <PersistGate loading={null} persistor={persistor}> */}\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n    {/* </PersistGate> */}\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <Provider store={store}>\r\n//       <App />\r\n//     </Provider>\r\n//   </React.StrictMode>,\r\n//   document.getElementById('root'),\r\n// );\r\n"],"sourceRoot":""}