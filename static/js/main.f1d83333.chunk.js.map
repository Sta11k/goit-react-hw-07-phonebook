{"version":3,"sources":["components/Forms/Form.module.css","components/Todolist/Todolist.module.css","components/Filter/Filter.module.css","redux/app/app-phonebook-actions.js","redux/app/app-phonebook-selector.js","components/Forms/Form.js","redux/app/operation.js","components/Todolist/Todolist.js","components/Filter/Filter.js","components/Timer/Timer.js","App.js","redux/app/app-phonebook-reducer.js","redux/store.js","index.js"],"names":["module","exports","addContacts","createAction","name","number","association","payload","id","shortid","generate","deleteContacts","changeFilter","getContacts","state","contacts","contact","getFilter","filter","Form","useSelector","dispatch","useDispatch","useState","setName","setNumber","setAssociation","onSubmit","e","preventDefault","repeatName","reduce","acc","repeatNumber","includes","alert","className","s","m","title","form__name","onChange","currentTarget","value","type","pattern","required","form__number","radio__btn","checked","contactsApi","createApi","reducerPath","tagTypes","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","fetchContact","query","providesTags","result","map","mutation","body","url","method","invalidatesTags","useFetchContactQuery","useAddContactsMutation","useDeleteContactsMutation","Todolist","contacts__list","phone","item","name__contact","btn","onClick","Filter","label","input","event","target","Timer","currentDate","Date","startOfNextMinute","getHours","getMinutes","getSeconds","timer","timer__item","button","button__item","source","interval","setStart","pipe","takeUntil","subscribe","App","contactApi","data","isFetching","contactList","createReducer","_","phonebookReducer","combineReducers","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","setupListeners","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uJACAA,EAAOC,QAAU,CAAC,WAAa,yBAAyB,MAAQ,sB,mBCAhED,EAAOC,QAAU,CAAC,eAAiB,iCAAiC,KAAO,yB,mBCA3ED,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,MAAQ,wB,0MCY3CC,EAAcC,uBACzB,gBACA,SAACC,EAAMC,EAAQC,GAAf,MAAgC,CAC9BC,QAAS,CACPC,GAAIC,IAAQC,WACZN,OACAC,SACAC,mBAKOK,EAAiBR,uBAAa,mBAC9BS,EAAeT,uBAAa,gBC1B5BU,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,SACtCC,EAAY,SAAAH,GAAK,OAAIA,EAAMC,SAASG,Q,OCoJlCC,MA5If,WACE,IAAMJ,EAAWK,YAAYP,GACvBQ,EAAWC,cAKjB,EAAwBC,mBAAS,IAAjC,mBAAOnB,EAAP,KAAaoB,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOlB,EAAP,KAAeoB,EAAf,KACA,EAAsCF,mBAAS,SAA/C,mBAAOjB,EAAP,KAAoBoB,EAApB,KAsDA,OACE,uBAAMC,SA7Ba,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAaf,EAASgB,QAC1B,SAACC,EAAKhB,GAAN,4BAAsBgB,GAAtB,CAA2BhB,EAAQZ,SACnC,IAEI6B,EAAelB,EAASgB,QAC5B,SAACC,EAAKhB,GAAN,4BAAsBgB,GAAtB,CAA2BhB,EAAQX,WACnC,IAGEyB,EAAWI,SAAS9B,IAAS6B,EAAaC,SAAS7B,GACrD8B,MAAM,GAAD,OAAI/B,EAAJ,YAAYC,EAAZ,iBAIM,KAATD,GAA0B,KAAXC,IA/CJ,SAACD,EAAMC,EAAQC,GAC9Be,EAASnB,EAAYE,EAAMC,EAAQC,IAmDnCqB,CAASvB,EAAMC,EAAQC,GACvBkB,EAAQ,IACRC,EAAU,IACVC,EAAe,UAPbS,MAAM,eAYsBC,UAAWC,IAAEC,EAA3C,UACE,oBAAIF,UAAWC,IAAEE,MAAjB,uBACA,wBAAOH,UAAWC,IAAEG,WAApB,iBAEE,uBAEEC,SAAU,SAAAb,GAAC,OAAIJ,EAAQI,EAAEc,cAAcC,QACvCC,KAAK,OACLD,MAAOvC,EACPA,KAAK,OACLyC,QAAQ,yHACRN,MAAM,kcACNO,UAAQ,OAGZ,wBAAOV,UAAWC,IAAEU,aAApB,mBAEE,uBAEEN,SAAU,SAAAb,GAAC,OAAIH,EAAUG,EAAEc,cAAcC,QACzCC,KAAK,MACLD,MAAOtC,EACPD,KAAK,SACLyC,QAAQ,yFACRN,MAAM,giBACNO,UAAQ,OAIZ,sBAAKV,UAAWC,IAAEW,WAAlB,UACE,kCACE,uBACEJ,KAAK,QACLxC,KAAK,cACLuC,MAAM,OACNF,SAAU,SAAAb,GAAC,OAAIF,EAAeE,EAAEc,cAAcC,QAC9CM,QAAyB,SAAhB3C,IANb,UAUA,kCACE,uBACEsC,KAAK,QACLxC,KAAK,cACLuC,MAAM,SACNF,SAAU,SAAAb,GAAC,OAAIF,EAAeE,EAAEc,cAAcC,QAC9CM,QAAyB,WAAhB3C,IANb,YAUA,kCACE,uBACEsC,KAAK,QACLxC,KAAK,cACLuC,MAAM,UACNF,SAAU,SAAAb,GAAC,OAAIF,EAAeE,EAAEc,cAAcC,QAC9CM,QAAyB,YAAhB3C,IANb,aAUA,kCACE,uBACEsC,KAAK,QACLxC,KAAK,cACLuC,MAAM,QACNF,SAAU,SAAAb,GAAC,OAAIF,EAAeE,EAAEc,cAAcC,QAC9CM,QAAyB,UAAhB3C,IANb,cAWF,wBAAQsC,KAAK,SAAb,8B,gCCzHOM,EAAcC,YAAU,CACnCC,YAAa,cACbC,SAAU,CAAC,YACXC,UAAWC,YAAe,CACxBC,QAAS,iDAEXC,UAAW,SAAAC,GAAO,MAAK,CACrBC,aAAcD,EAAQE,MAAM,CAC1BA,MAAO,8BACPC,aAAc,SAAAC,GAAM,OAClBA,EAAM,sBAEGA,EAAOC,KAAI,kBAAa,CAAEnB,KAAM,WAAYpC,GAAjC,EAAGA,QAFjB,CAGA,CAAEoC,KAAM,WAAYpC,GAAI,UAE1B,CAAC,CAAEoC,KAAM,WAAYpC,GAAI,YAEjCN,YAAawD,EAAQM,SAAS,CAC5BJ,MAAO,SAAAK,GAAI,MAAK,CACdC,IAAI,YACJC,OAAQ,OACRF,SAEFG,gBAAiB,CAAC,CAAExB,KAAM,WAAYpC,GAAI,WAE5CG,eAAgB+C,EAAQM,SAAS,CAC/BJ,MAAO,SAAApD,GAAE,MAAK,CACZ0D,IAAI,YAAD,OAAc1D,GACjB2D,OAAQ,WAEVC,gBAAiB,CAAC,CAAExB,KAAM,WAAYpC,GAAI,eAM9C6D,EAGEnB,EAHFmB,qBAGEnB,EAFFoB,uBAEEpB,EADFqB,0BChBaC,MAjCf,YAAgC,IAAZxD,EAAW,EAAXA,QASlB,OACE,oBAAIoB,UAAWC,IAAEoC,eAAjB,SACGzD,EAAQ+C,KAAI,YAAuC,IAApCvD,EAAmC,EAAnCA,GAAIJ,EAA+B,EAA/BA,KAAMsE,EAAyB,EAAzBA,MAAOpE,EAAkB,EAAlBA,YAC/B,OACE,qBAAa8B,UAAWC,IAAEsC,KAA1B,UACG,IACD,oBAAGvC,UAAWC,IAAEuC,cAAhB,0BACgBtE,EADhB,MAC+B,2CAAcF,EAAd,SAC7B,4CAAesE,EAAf,WAEF,yBACEtC,UAAWC,IAAEwC,IACbjC,KAAK,SACLkC,QAAS,kBAAMnE,EAAeH,IAHhC,UAKG,IALH,sBANOA,S,iBCFJuE,MAjBf,WACE,IAAM1D,EAAWC,cACXqB,EAAQvB,YAAYH,GAE1B,OACE,wBAAOmB,UAAWC,IAAE2C,MAApB,kCAEE,uBACE5C,UAAWC,IAAE4C,MACbrC,KAAK,OACLD,MAAOA,EACPF,SARW,SAAAyC,GAAK,OAAI7D,EAAST,EAAasE,EAAMC,OAAOxC,e,yCCqChDyC,MAxCf,WAIE,IAAMC,EAAc,IAAIC,KAClBC,EAAoB,IAAID,KAC5BD,EAAYG,WACZH,EAAYI,aACZJ,EAAYK,aAAe,GAW7B,OACE,qCACE,qBAAItD,UAAWC,IAAEsD,MAAjB,UACE,oBAAIvD,UAAWC,IAAEuD,YAAjB,iBACA,oBAAIxD,UAAWC,IAAEuD,YAAjB,iBACA,oBAAIxD,UAAWC,IAAEuD,YAAjB,oBAEF,oBAAIxD,UAAWC,IAAEwD,OAAjB,SACE,oBAAIzD,UAAWC,IAAEyD,aAAjB,SACE,wBAAQhB,QAjBQ,SAAAlD,GACtB,IAAMmE,EAASC,YAAS,KACxB,cAA0BzE,WAA1B,GAAc0E,GAAd,WACMnC,EAASiC,EAAOG,KAAKC,YAAUR,YAAMJ,KAC3CU,GAAS,kBAAMnC,EAAOsC,gBAahB,0CCnBK,SAASC,IACtB,MAAyChC,IAA3BiC,EAAd,EAAQC,KAAR,EAA0BC,WAC1B,OACE,sBAAKpE,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IAECkE,GAAc,cAAC,EAAD,CAAUtF,QAASsF,IAElC,cAAC,EAAD,O,0DCMAG,EAAcC,wBA3BF,GA2B2B,CAC3C,eAAgB,SAAC5F,EAAD,OAAUP,EAAV,EAAUA,QAAV,4BAA4BO,GAA5B,CAAmCP,KACnD,kBAAmB,SAACO,EAAD,OAAUP,EAAV,EAAUA,QAAV,OACjBO,EAAMI,QAAO,qBAAGV,KAAgBD,QAG9BW,EAASwF,wBAAc,GAAI,CAC/B,eAAgB,SAACC,EAAD,YAAMpG,WAGXqG,EAAmBC,0BAAgB,CAC9C7F,QAASyF,EACTvF,WCXW4F,EAAQC,yBAAe,CAClCC,QAAQ,aACNjG,SAAU6F,GACT1D,EAAYE,YAAcF,EAAY8D,SAEzCC,WAAY,SAAAC,GAAoB,OAC9BA,EACE,CACEC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,QAK7DC,OAAOC,KACPD,OAAOzE,EAAY+D,aACxBY,UAAUC,IAGZC,yBAAejB,EAAMzF,UCxCrB2G,IAASC,OACP,cAAC,IAAMC,WAAP,UAEE,cAAC,IAAD,CAAUpB,MAAOA,EAAjB,SACE,cAAC,EAAD,QAIJqB,SAASC,eAAe,W","file":"static/js/main.f1d83333.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"radio__btn\":\"Form_radio__btn__2OTYR\",\"title\":\"Form_title__2Oe9j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts__list\":\"Todolist_contacts__list__ZuyCQ\",\"item\":\"Todolist_item__1OoFh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__2L8vP\",\"input\":\"Filter_input__3fKQi\"};","import { createAction } from '@reduxjs/toolkit';\n// import { defaults } from 'gh-pages';\n\n// import { useState } from 'react';\n// import { v4 as uuid } from 'uuid';\n// const contactId = uuid();\nimport shortid from 'shortid';\n// import {\n//   useFetchContactQuery,\n//   useAddContactsMutation,\n//   useDeleteContactsMutation,\n// } from '../../redux/app/operation';\n\nexport const addContacts = createAction(\n  'contacts/add',\n  (name, number, association) => ({\n    payload: {\n      id: shortid.generate(),\n      name,\n      number,\n      association,\n    },\n  }),\n);\n\nexport const deleteContacts = createAction('contacts/delete');\nexport const changeFilter = createAction('filter/value');\n","export const getContacts = state => state.contacts.contact;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const optimizedFilter = filter.toLowerCase();\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(optimizedFilter),\n  );\n};\n","// import { Component } from 'react';\n// import { connect } from 'react-redux';\nimport { useState } from 'react';\nimport s from './Form.module.css';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContacts } from '../../redux/app/app-phonebook-actions';\nimport { getContacts } from '../../redux/app/app-phonebook-selector';\n\nfunction Form() {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const onSubmit = (name, number, association) =>\n    dispatch(addContacts(name, number, association));\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [association, setAssociation] = useState('Other');\n\n  // const contactCheck = () => {\n\n  //     const repeatName = contacts.reduce(\n  //     (acc, contact) => [...acc, contact.name],\n  //     [],\n  //   );\n  //   const repeatNumber = contacts.reduce(\n  //     (acc, contact) => [...acc, contact.number],\n  //     [],\n  //   );\n\n  //   if (repeatName.includes(name) || repeatNumber.includes(number)) {\n\n  //    alert(`${name} ${number} is already `);\n  //     return;\n  //   }\n\n  //   if (name === '' || number === '') {\n  //     alert(`Enter data`);\n  //     return;\n  //   }\n\n  // };\n\n  const handleSabmit = e => {\n    e.preventDefault();\n    const repeatName = contacts.reduce(\n      (acc, contact) => [...acc, contact.name],\n      [],\n    );\n    const repeatNumber = contacts.reduce(\n      (acc, contact) => [...acc, contact.number],\n      [],\n    );\n\n    if (repeatName.includes(name) || repeatNumber.includes(number)) {\n      alert(`${name} ${number} is already `);\n      return;\n    }\n\n    if (name === '' || number === '') {\n      alert(`Enter data`);\n      return;\n    }\n\n    onSubmit(name, number, association);\n    setName('');\n    setNumber('');\n    setAssociation('Other');\n    //Дизпачим продукет в редакс\n  };\n\n  return (\n    <form onSubmit={handleSabmit} className={s.m}>\n      <h2 className={s.title}>Phonebook</h2>\n      <label className={s.form__name}>\n        Name\n        <input\n          // id={this.contactIdName}\n          onChange={e => setName(e.currentTarget.value)}\n          type=\"text\"\n          value={name}\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className={s.form__number}>\n        Number\n        <input\n          // id={this.contactIdNumber}\n          onChange={e => setNumber(e.currentTarget.value)}\n          type=\"tel\"\n          value={number}\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n\n      <div className={s.radio__btn}>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"association\"\n            value=\"Work\"\n            onChange={e => setAssociation(e.currentTarget.value)}\n            checked={association === 'Work'}\n          />\n          Work\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"association\"\n            value=\"Family\"\n            onChange={e => setAssociation(e.currentTarget.value)}\n            checked={association === 'Family'}\n          />\n          Family\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"association\"\n            value=\"Friends\"\n            onChange={e => setAssociation(e.currentTarget.value)}\n            checked={association === 'Friends'}\n          />\n          Friends\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"association\"\n            value=\"Other\"\n            onChange={e => setAssociation(e.currentTarget.value)}\n            checked={association === 'Other'}\n          />\n          Other\n        </label>\n      </div>\n      <button type=\"submit\">Add contacts</button>\n    </form>\n  );\n}\n\nexport default Form;\n\n// class Form extends Component {\n//   state = {\n//     // contacts: [],\n//     id: '',\n//     name: '',\n//     number: '',\n//     association: 'Other',\n//   };\n\n//   contactIdName = uuid();\n//   contactIdNumber = uuid();\n\n//   handleChange = e => {\n//     console.log(e.currentTarget.value);\n//     // const contactId = uuid();\n//     const { name, value } = e.currentTarget;\n//     this.setState({ [name]: value });\n//     // this.setState({ id: contactId });\n//   };\n\n//   handleSabmit = e => {\n//     e.preventDefault();\n//     const contactId = uuid();\n//     const { name, number, association } = this.state;\n//     const contactItem = {\n//       id: contactId,\n//       name,\n//       number,\n//       association,\n//     };\n//     this.setState({ contactItem }); //для себя пишем новий обект продукта\n\n//     this.props.onAdd(contactItem); //Дизпачим продукет в редакс\n//     this.resetForm();\n//   };\n\n//   resetForm = () => {\n//     this.setState({ id: '', name: '', number: '', association: 'Other' });\n//   };\n\n//   render() {\n//     return (\n//       <form onSubmit={this.handleSabmit} className={s.m}>\n//         <h2 className={s.title}>Phonebook</h2>\n//         <label htmlFor={this.contactIdName} className={s.form__name}>\n//           Name\n//           <input\n//             id={this.contactIdName}\n//             onChange={this.handleChange}\n//             type=\"text\"\n//             value={this.state.name}\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//           />\n//         </label>\n//         <label htmlFor={this.contactIdNumber} className={s.form__number}>\n//           Number\n//           <input\n//             id={this.contactIdNumber}\n//             onChange={this.handleChange}\n//             type=\"tel\"\n//             value={this.state.number}\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//           />\n//         </label>\n\n//         <div className={s.radio__btn}>\n//           <label>\n//             <input\n//               type=\"radio\"\n//               name=\"association\"\n//               value=\"Work\"\n//               onChange={this.handleChange}\n//               checked={this.state.association === 'Work'}\n//             />\n//             Work\n//           </label>\n//           <label>\n//             <input\n//               type=\"radio\"\n//               name=\"association\"\n//               value=\"Family\"\n//               onChange={this.handleChange}\n//               checked={this.state.association === 'Family'}\n//             />\n//             Family\n//           </label>\n//           <label>\n//             <input\n//               type=\"radio\"\n//               name=\"association\"\n//               value=\"Friends\"\n//               onChange={this.handleChange}\n//               checked={this.state.association === 'Friends'}\n//             />\n//             Friends\n//           </label>\n//           <label>\n//             <input\n//               type=\"radio\"\n//               name=\"association\"\n//               value=\"Other\"\n//               onChange={this.handleChange}\n//               checked={this.state.association === 'Other'}\n//             />\n//             Other\n//           </label>\n//         </div>\n//         <button type=\"submit\">Add contacts</button>\n//       </form>\n//     );\n//   }\n// }\n\n// const mapDispatchToProps = dispatch => {\n//   // console.log(\"dispatch\", dispatch);\n//   return {\n//     onAdd: contactR => dispatch(addContacts(contactR)),\n//   };\n// };\n// export default connect(null, mapDispatchToProps)(Form);\n","// import axios from 'axios';\n// import { configureStore } from '@reduxjs/toolkit';\n// import { setupListeners } from '@reduxjs/toolkit/query';\n// import { phonebookReducer } from './app-phonebook-reducer';\n\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n// import {\n//   getContactsRequest,\n//   getContactsSuccess,\n//   getContactsError,\n//   addContactsRequest,\n//   addContactsSuccess,\n//   addContactsError,\n//   deleteContactsRequest,\n//   deleteontactsSuccess,\n//   deleteContactsError,\n// } from './operatin';\n\n// axios.get('https://61935e66d3ae6d0017da850e.mockapi.io/contacts');\n\n//youtu.be/xJ2cgRkR8D0?t=4941\n//redux-toolkit.js.org/rtk-query/api/createApi\n\nexport const contactsApi = createApi({\n  reducerPath: 'contactsApi',\n  tagTypes: ['Contacts'],\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://61935e66d3ae6d0017da850e.mockapi.io/',\n  }),\n  endpoints: builder => ({\n    fetchContact: builder.query({\n      query: () => `/contacts`,\n      providesTags: result =>\n        result\n          ? [\n              ...result.map(({ id }) => ({ type: 'Contacts', id })),\n              { type: 'Contacts', id: 'LIST' },\n            ]\n          : [{ type: 'Contacts', id: 'LIST' }],\n    }),\n    addContacts: builder.mutation({\n      query: body => ({\n        url: `/contacts`,\n        method: 'POST',\n        body,\n      }),\n      invalidatesTags: [{ type: 'Contacts', id: 'LIST' }],\n    }),\n    deleteContacts: builder.mutation({\n      query: id => ({\n        url: `contacts/${id}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: [{ type: 'Contacts', id: 'LIST' }],\n    }),\n  }),\n});\n\nexport const {\n  useFetchContactQuery,\n  useAddContactsMutation,\n  useDeleteContactsMutation,\n} = contactsApi;\n\n// console.log(contactsApi);\n// const fetchContacts = () => async dispatch => {\n//   dispatch(fetchContactsRequest());\n//   try {\n//     const { data } = await axios.get('http://localhost:4040/contacts');\n//     dispatch(fetchContactsSuccess(data));\n//   } catch (error) {\n//     dispatch(fetchContactsError(error));\n//   }\n// };\n\n// const addContact = (name, number) => async dispatch => {\n//   const contact = {\n//     name,\n//     number,\n//   };\n\n//   dispatch(addContactRequest());\n\n//   try {\n//     const { data } = await axios.post(\n//       'http://localhost:4040/contacts',\n//       contact,\n//     );\n//     dispatch(addContactSuccess(data));\n//   } catch (error) {\n//     dispatch(addContactError(error));\n//   }\n// };\n\n// const deleteContact = id => async dispatch => {\n//   dispatch(deleteContactRequest());\n//   try {\n//     await axios.delete(`http://localhost:4040/contacts/${id}`);\n//     dispatch(deleteContactSuccess(id));\n//   } catch (error) {\n//     dispatch(deleteContactError(error));\n//   }\n// };\n\n// const contactsOperations = {\n//   fetchContacts,\n//   addContact,\n//   deleteContact,\n// };\n// export default contactsOperations;\n","// import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\nimport s from './Todolist.module.css';\nimport { deleteContacts } from '../../redux/app/app-phonebook-actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getVisibleContacts } from '../../redux/app/app-phonebook-selector';\nimport {\n  useFetchContactQuery,\n  useAddContactsMutation,\n  useDeleteContactsMutation,\n} from '../../redux/app/operation';\n\nfunction Todolist({ contact }) {\n  // const { data, isfetching } = useFetchContactQuery();\n  // const [deleteContacts, { isLoading: isDeleting }] =\n  //   useDeleteContactsMutation();\n\n  // const contactsOll = useSelector(getVisibleContacts);\n  // const dispatch = useDispatch();\n  // const onDeleteContact = id => dispatch(deleteContacts(id));\n\n  return (\n    <ul className={s.contacts__list}>\n      {contact.map(({ id, name, phone, association }) => {\n        return (\n          <li key={id} className={s.item}>\n            {' '}\n            <p className={s.name__contact}>\n              Association: {association} | <span> name: {name} | </span>\n              <span>number: {phone} |</span>\n            </p>\n            <button\n              className={s.btn}\n              type=\"button\"\n              onClick={() => deleteContacts(id)}\n            >\n              {' '}\n              DELETE contact\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\nexport default Todolist;\n\n// Todolist.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     }),\n//   ),\n//   onDeleteContact: PropTypes.func.isRequired,\n// };\n\n// const mapStateToProps = state => {\n//   const { filter } = state;\n//   const optimizedFilter = filter.toLowerCase();\n//   const vizibleCOntacts = state.contact.filter(contact =>\n//     contact.name.toLowerCase().includes(optimizedFilter),\n//   );\n\n//   return { contactsOll: vizibleCOntacts };\n// };\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     onDeleteContact: id => dispatch(deleteContacts(id)),\n//   };\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(Todolist);\n","// import { connect } from 'react-redux';\nimport s from './Filter.module.css';\n// import PropTypes from 'prop-types';\nimport { changeFilter } from '../../redux/app/app-phonebook-actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from '../../redux/app/app-phonebook-selector';\nfunction Filter() {\n  const dispatch = useDispatch();\n  const value = useSelector(getFilter);\n  const onChange = event => dispatch(changeFilter(event.target.value));\n  return (\n    <label className={s.label}>\n      Find contacts by name\n      <input\n        className={s.input}\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      />\n    </label>\n  );\n}\n\nexport default Filter;\n\n// Filter.propTypes = {\n//   value: PropTypes.string,\n//   onChange: PropTypes.func.isRequired,\n// };\n// const mapStateToProps = state => ({\n//   value: state.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: event => dispatch(changeFilter(event.currentTarget.value)),\n// });\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","// import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\nimport s from './Timer.module.css';\nimport { timer, interval } from 'rxjs';\nimport { useState } from 'react';\nimport { takeUntil } from 'rxjs/operators';\nfunction Timer() {\n  // const startTimer = () => {};\n  // timer(0, 1000).subscribe(n => console.log('timer', n));\n  // interval(1000).subscribe(n => console.log('interval', n));\n  const currentDate = new Date();\n  const startOfNextMinute = new Date(\n    currentDate.getHours(),\n    currentDate.getMinutes(),\n    currentDate.getSeconds() + 1,\n  );\n\n  const hendelStartStop = e => {\n    const source = interval(1000);\n    const [start, setStart] = useState;\n    const result = source.pipe(takeUntil(timer(startOfNextMinute)));\n    setStart(() => result.subscribe());\n  };\n  // This could be any observable stream\n\n  return (\n    <>\n      <ul className={s.timer}>\n        <li className={s.timer__item}>HH:{}</li>\n        <li className={s.timer__item}>MM:</li>\n        <li className={s.timer__item}>SS:</li>\n      </ul>\n      <ul className={s.button}>\n        <li className={s.button__item}>\n          <button onClick={hendelStartStop}>«Start / Stop»</button>\n        </li>\n        {/* <li className={s.button__item}>\n          <button onClick={hendelWait}>«Wait»</button>\n        </li>\n        <li className={s.button__item}>\n          <button onClick={hendeReset}>«Reset»</button>\n        </li> */}\n      </ul>\n    </>\n  );\n}\nexport default Timer;\n","import './App.css';\nimport Form from './components/Forms/Form';\nimport TodoList from './components/Todolist/Todolist';\nimport Filter from './components/Filter/Filter';\nimport {\n  useFetchContactQuery,\n  useAddContactsMutation,\n  useDeleteContactsMutation,\n} from '../src/redux/app/operation';\n// import { Component } from 'react';\n// import { useSelector } from 'react-redux';\n// import { getVisibleContacts } from './redux/app/app-phonebook-selector';\n// import { connect } from 'react-redux';\n// import TestList from './components/Todolist/TestList';\nimport Timer from './components/Timer/Timer';\nexport default function App() {\n  const { data: contactApi, isFetching } = useFetchContactQuery();\n  return (\n    <div className=\"App\">\n      <Form />\n      <Filter />\n      {/* {isFetching} */}\n      {contactApi && <TodoList contact={contactApi} />}\n      {/* <TestList /> */}\n      <Timer />\n    </div>\n  );\n}\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n// import { addContacts, deleteContacts } from './app-phonebook-actions';\nconst initState = [\n  // {\n  //   id: 'id-1',\n  //   name: 'Rosie Simpson',\n  //   number: '459-12-56',\n  //   association: 'Other',\n  // },\n  // {\n  //   id: 'id-2',\n  //   name: 'Hermione Kline',\n  //   number: '443-89-12',\n  //   association: 'Other',\n  // },\n  // {\n  //   id: 'id-3',\n  //   name: 'Eden Clements',\n  //   number: '645-17-79',\n  //   association: 'Other',\n  // },\n  // {\n  //   id: 'id-4',\n  //   name: 'Annie Copeland',\n  //   number: '227-91-26',\n  //   association: 'Other',\n  // },\n];\n\nconst contactList = createReducer(initState, {\n  'contacts/add': (state, { payload }) => [...state, payload],\n  'contacts/delete': (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  'filter/value': (_, { payload }) => payload,\n});\n\nexport const phonebookReducer = combineReducers({\n  contact: contactList,\n  filter,\n});\n\n// const contactList = (state = initState, { type, payload }) => {\n//   // console.log('action.payload', action.payload);\n//   // console.log('state', state);\n//   switch (type) {\n//     case 'contacts/add':\n//       return [...state, payload];\n//     case 'contacts/delete':\n//       return state.filter(contact => contact.id !== payload.id);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case 'filter/value':\n//       return payload;\n//     default:\n//       return state;\n//   }\n// };\n","// import { createStore, applyMiddleware } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// export const store = createStore(\n//   phonebookReducer,\n//   composeWithDevTools(applyMiddleware()),\n// );\nimport { setupListeners } from '@reduxjs/toolkit/dist/query';\nimport { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  // persistStore,\n  // persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n// import storage from 'redux-persist/lib/storage';\nimport { phonebookReducer } from './app/app-phonebook-reducer';\nimport { contactsApi } from './app/operation';\n// const phonebookPersistConfig = {\n//   key: 'contact',\n//   storage,\n//   blacklist: ['filter'],\n// };\n// const persisteReducer = persistReducer(\n//   phonebookPersistConfig,\n//   phonebookReducer,\n// );\nexport const store = configureStore({\n  reducer: {\n    contacts: phonebookReducer,\n    [contactsApi.reducerPath]: contactsApi.reducer,\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware(\n      {\n        serializableCheck: {\n          ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n        },\n      },\n      //   ПЕРЕВІРИТИ ЧИ ВПЛИВАЄ НА ПЕРВІРКУ\n    )\n      .concat(logger)\n      .concat(contactsApi.middleware),\n  devTools: process.env.NODE_ENV !== 'production',\n});\n\nsetupListeners(store.dispatch);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\n// import { store} from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <PersistGate loading={null} persistor={persistor}> */}\n    <Provider store={store}>\n      <App />\n    </Provider>\n    {/* </PersistGate> */}\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <Provider store={store}>\n//       <App />\n//     </Provider>\n//   </React.StrictMode>,\n//   document.getElementById('root'),\n// );\n"],"sourceRoot":""}